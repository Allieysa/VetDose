import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'add_patient_dialog.dart';

class PatientHistoryScreen extends StatefulWidget {
  @override
  _PatientHistoryScreenState createState() => _PatientHistoryScreenState();
}

class _PatientHistoryScreenState extends State<PatientHistoryScreen> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  void _showAddPatientDialog() {
    // Controllers to capture user input
    final TextEditingController typeController = TextEditingController();
    final TextEditingController nameController = TextEditingController();
    final TextEditingController ageController = TextEditingController();
    final TextEditingController weightController = TextEditingController();
    final TextEditingController symptomsController = TextEditingController();

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        return AlertDialog(
          contentPadding: EdgeInsets.all(16),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          title: Center(
            child: Text(
              'Patient Information',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
          ),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                _buildInputField('Animal type', typeController),
                _buildInputField('Animal name', nameController),
                _buildInputField('Age', ageController),
                _buildInputField('Weight', weightController),
                _buildInputField('Symptoms', symptomsController),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context), // Close dialog
              child: Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: () async {
                // Save patient data to Firestore
                await _savePatientData(
                  typeController.text,
                  nameController.text,
                  ageController.text,
                  weightController.text,
                  symptomsController.text,
                );
                Navigator.pop(context); // Close the dialog
              },
              child: Text('Save'),
            ),
          ],
        );
      },
    );
  }

  Widget _buildInputField(String label, TextEditingController controller) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextField(
        controller: controller,
        decoration: InputDecoration(
          labelText: label,
          filled: true,
          fillColor: Colors.white,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
          ),
        ),
      ),
    );
  }

  Future<void> _savePatientData(
      String type, String name, String age, String weight, String symptoms) async {
    User? user = _auth.currentUser;

    if (user != null) {
      // Save to Firestore under /users/{userID}/patient_history
      await _firestore
          .collection('users')
          .doc(user.uid)
          .collection('patient_history')
          .add({
        'type': type,
        'name': name,
        'age': age,
        'weight': weight,
        'symptoms': symptoms,
        'timestamp': FieldValue.serverTimestamp(),
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Patient information saved successfully!')),
      );
    } else {
      print('No user logged in');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Patients List'),
        backgroundColor: Colors.white,
        elevation: 0,
        actions: [
          ElevatedButton(
  onPressed: () {
    showAddPatientDialog(context, () {
      setState(() {}); // Refresh StreamBuilder
    });
  },
  style: ElevatedButton.styleFrom(
    backgroundColor: Colors.grey[300],
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(20),
    ),
  ),
  child: Text(
    'Add patient',
    style: TextStyle(color: Colors.black),
  ),
),
        ],
      ),
      body: StreamBuilder<QuerySnapshot>(
        stream: _firestore
            .collection('users')
            .doc(_auth.currentUser?.uid)
            .collection('patient_history')
            .orderBy('timestamp', descending: true)
            .snapshots(),
        builder: (context, snapshot) {
          if (snapshot.hasError) return Center(child: Text('Error loading data'));
          if (!snapshot.hasData) return Center(child: CircularProgressIndicator());

          final patients = snapshot.data!.docs;

          if (patients.isEmpty) {
            return Center(child: Text('No patients added yet.'));
          }

          return ListView.builder(
            itemCount: patients.length,
            itemBuilder: (context, index) {
              final patient = patients[index].data() as Map<String, dynamic>;
              return Card(
                color: Colors.grey[300],
                margin: EdgeInsets.all(8.0),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                child: ListTile(
                  contentPadding: EdgeInsets.all(16),
                  title: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text('${patient['name']}',
                          style: TextStyle(fontWeight: FontWeight.bold)),
                      Text(patient['type'] ?? '',
                          style: TextStyle(fontWeight: FontWeight.bold)),
                    ],
                  ),
                  subtitle: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(height: 8),
                      Text('Age: ${patient['age']}'),
                      Text('Weight: ${patient['weight']}'),
                      Text('Symptoms: ${patient['symptoms']}'),
                    ],
                  ),
                  trailing: Icon(Icons.arrow_forward_ios),
                ),
              );
            },
          );
        },
      ),
    );
  }
}
